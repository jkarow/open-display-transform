#line 2 // Fix line numbers in resolve/logs/rollinglog.txt
// ------------------------------------------------
//     The Chromagnon View Transform
//     v0.0.7
    
//     Written by Jed Smith
//     https://github.com/jedypod/open-display-transform

//     License: GPL v3
// -------------------------------------------------

//////////////////////////////////////////////////////////////////////////////
/* Parameters */
DEFINE_UI_PARAMS(in_gamut, input gamut, DCTLUI_COMBO_BOX, 13, {i_xyz, i_ap0, i_ap1, i_p3d65, i_rec2020, i_rec709, i_awg3, i_awg4, i_rwg, i_sgamut3, i_sgamut3cine, i_bmdwg, i_cinegamut, i_egamut, i_davinciwg}, {XYZ, ACES 2065-1, ACEScg, P3D65, Rec.2020, Rec.709, Arri Wide Gamut 3, Arri Wide Gamut 4, Red Wide Gamut RGB, Sony SGamut3, Sony SGamut3Cine, Blackmagic Wide Gamut, Canon Cine Gamut, Filmlight E - Gamut, DaVinci Wide Gamut})
// Tonescale
DEFINE_UI_PARAMS(Lp, Lp, DCTLUI_SLIDER_FLOAT, 100.0, 100.0, 1000.0, 10.0)
DEFINE_UI_PARAMS(Lg, Lg, DCTLUI_SLIDER_FLOAT, 10.0, 4.0, 20.0, 0.0)
DEFINE_UI_PARAMS(Lgb, Lg boost, DCTLUI_SLIDER_FLOAT, 0.12, 0.0, 0.5, 0.0)
DEFINE_UI_PARAMS(off, offset, DCTLUI_SLIDER_FLOAT, 0.005, 0.0, 0.02, 0.0)
DEFINE_UI_PARAMS(con, contrast, DCTLUI_SLIDER_FLOAT, 1.8, 1.0, 3.0, 0.0)
DEFINE_UI_PARAMS(conh, high contrast, DCTLUI_SLIDER_FLOAT, 0.0, 0.0, 0.5, 0.0)
DEFINE_UI_PARAMS(w0, high clip, DCTLUI_SLIDER_FLOAT, 128.0, 16.0, 256.0, 0.0)
// "Split-toning" - adjust neutral axis 
DEFINE_UI_PARAMS(wtm, white temp, DCTLUI_SLIDER_FLOAT, 0.0, -0.6, 0.6, 0.0)
DEFINE_UI_PARAMS(wtn, white tint, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.0)
DEFINE_UI_PARAMS(gtm, grey temp, DCTLUI_SLIDER_FLOAT, 0.0, -0.6, 0.6, 0.0)
DEFINE_UI_PARAMS(gtn, grey tint, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.0)
// Compress "Chroma" RGB
DEFINE_UI_PARAMS(pc_p, purity compress: slope, DCTLUI_SLIDER_FLOAT, 0.5, 0.0, 1.0, 0.0)
DEFINE_UI_PARAMS(pc_x0,                 amount, DCTLUI_SLIDER_FLOAT, 0.1, 0.0, 0.5, 0.0)
DEFINE_UI_PARAMS(pc_t0,                 threshold, DCTLUI_SLIDER_FLOAT, 0.1, 0.0, 1.0, 0.0)
// Rendering Matrix
DEFINE_UI_PARAMS(rs_rnd, render matrix: scale R, DCTLUI_SLIDER_FLOAT, 0.01, 0.0, 0.3, 0.0)
DEFINE_UI_PARAMS(gs_rnd,                     G, DCTLUI_SLIDER_FLOAT, 0.03, 0.0, 0.3, 0.0)
DEFINE_UI_PARAMS(bs_rnd,                     B, DCTLUI_SLIDER_FLOAT, 0.025, 0.0, 0.3, 0.0)
DEFINE_UI_PARAMS(rr_rnd,              rotate R, DCTLUI_SLIDER_FLOAT, 0.01, -0.1, 0.1, 0.0)
DEFINE_UI_PARAMS(gr_rnd,                     G, DCTLUI_SLIDER_FLOAT, 0.0, -0.1, 0.1, 0.0)
DEFINE_UI_PARAMS(br_rnd,                     B, DCTLUI_SLIDER_FLOAT, 0.015, -0.1, 0.1, 0.0)
// Look Matrix
DEFINE_UI_PARAMS(rs_lk, Look MTX: R dist, DCTLUI_SLIDER_FLOAT, 0.03, 0.0, 0.3, 0.0)
DEFINE_UI_PARAMS(gs_lk, Look MTX: G dist, DCTLUI_SLIDER_FLOAT, 0.12, 0.0, 0.3, 0.0)
DEFINE_UI_PARAMS(bs_lk, Look MTX: B dist, DCTLUI_SLIDER_FLOAT, 0.02, 0.0, 0.3, 0.0)

DEFINE_UI_PARAMS(clamp, clamp, DCTLUI_CHECK_BOX, 0);
DEFINE_UI_PARAMS(invert, invert, DCTLUI_CHECK_BOX, 0);
DEFINE_UI_PARAMS(display_gamut, display gamut, DCTLUI_COMBO_BOX, 0, {Rec709, P3D65, Rec2020}, {Rec.709, P3 D65, Rec.2020})
DEFINE_UI_PARAMS(EOTF, display eotf, DCTLUI_COMBO_BOX, 2, {lin, srgb, rec1886, dci, pq, hlg}, {Linear, 2.2 Power - sRGB Display, 2.4 Power - Rec .1886, 2.6 Power - DCI, ST 2084 PQ, HLG})



// Gamut Conversion Matrices
#define matrix_ap0_to_xyz make_float3x3(make_float3(0.93863094875f, -0.00574192055f, 0.017566898852f), make_float3(0.338093594922f, 0.727213902811f, -0.065307497733f), make_float3(0.000723121511f, 0.000818441849f, 1.0875161874f))
#define matrix_ap1_to_xyz make_float3x3(make_float3(0.652418717672f, 0.127179925538f, 0.170857283842f), make_float3(0.268064059194f, 0.672464478993f, 0.059471461813f), make_float3(-0.00546992851f, 0.005182799977f, 1.08934487929f))
#define matrix_rec709_to_xyz make_float3x3(make_float3(0.412390917540f, 0.357584357262f, 0.180480793118f), make_float3(0.212639078498f, 0.715168714523f, 0.072192311287f), make_float3(0.019330825657f, 0.119194783270f, 0.950532138348f))
#define matrix_p3d65_to_xyz make_float3x3(make_float3(0.486571133137f, 0.265667706728f, 0.198217317462f), make_float3(0.228974640369f, 0.691738605499f, 0.079286918044f), make_float3(-0.000000000000f, 0.045113388449, 1.043944478035f))
#define matrix_rec2020_to_xyz make_float3x3(make_float3(0.636958122253f, 0.144616916776f, 0.168880969286f), make_float3(0.262700229883f, 0.677998125553f, 0.059301715344f), make_float3(0.000000000000f, 0.028072696179, 1.060985088348f))
#define matrix_arriwg3_to_xyz make_float3x3(make_float3(0.638007619284f, 0.214703856337f, 0.097744451431f), make_float3(0.291953779f, 0.823841041511f, -0.11579482051f), make_float3(0.002798279032f, -0.067034235689f, 1.15329370742f))
#define matrix_arriwg4_to_xyz make_float3x3(make_float3(0.704858320407f, 0.12976029517f, 0.115837311474f), make_float3(0.254524176404f, 0.781477732712f, -0.036001909116f), make_float3(0.0f, 0.0f, 1.08905775076f))
#define matrix_redwg_to_xyz make_float3x3(make_float3(0.735275208950f, 0.068609409034f, 0.146571278572f), make_float3(0.286694079638f, 0.842979073524f, -0.129673242569f), make_float3(-0.079680845141f, -0.347343206406, 1.516081929207f))
#define matrix_sonysgamut3_to_xyz make_float3x3(make_float3(0.706482713192f, 0.128801049791f, 0.115172164069f), make_float3(0.270979670813f, 0.786606411221f, -0.057586082034f), make_float3(-0.009677845386f, 0.004600037493f, 1.09413555865f))
#define matrix_sonysgamut3cine_to_xyz make_float3x3(make_float3(0.599083920758f, 0.248925516115f, 0.102446490178f), make_float3(0.215075820116f, 0.885068501744f, -0.100144321859f), make_float3(-0.032065849545f, -0.027658390679f, 1.14878199098f))
#define matrix_bmdwg_to_xyz make_float3x3(make_float3(0.606538414955f, 0.220412746072f, 0.123504832387f), make_float3(0.267992943525f, 0.832748472691f, -0.100741356611f), make_float3(-0.029442556202f, -0.086612440646, 1.205112814903f))
#define matrix_egamut_to_xyz make_float3x3(make_float3(0.705396831036f, 0.164041340351f, 0.081017754972f), make_float3(0.280130714178f, 0.820206701756f, -0.100337378681f), make_float3(-0.103781513870f, -0.072907261550, 1.265746593475f))
#define matrix_davinciwg_to_xyz make_float3x3(make_float3(0.700622320175f, 0.148774802685f, 0.101058728993f), make_float3(0.274118483067f, 0.873631775379f, -0.147750422359f), make_float3(-0.098962903023f, -0.137895315886, 1.325916051865f))
#define matrix_canoncinegamut_to_xyz make_float3x3(make_float3(0.716049646552f, 0.129683477876f, 0.104722802624f), make_float3(0.261261357526f, 0.869642145755f, -0.130903503281f), make_float3(-0.00967634657502f, -0.236481636126f, 1.33521573346f))

#define matrix_xyz_to_rec709 make_float3x3(make_float3(3.2409699419f, -1.53738317757f, -0.498610760293f), make_float3(-0.969243636281f, 1.87596750151f, 0.041555057407f), make_float3(0.055630079697f, -0.203976958889f, 1.05697151424f))
#define matrix_xyz_to_p3d65 make_float3x3(make_float3(2.49349691194f, -0.931383617919f, -0.402710784451f), make_float3(-0.829488969562f, 1.76266406032f, 0.023624685842f), make_float3(0.035845830244f, -0.076172389268f, 0.956884524008f))
#define matrix_xyz_to_rec2020 make_float3x3(make_float3(1.71665118797f, -0.355670783776f, -0.253366281374f), make_float3(-0.666684351832f, 1.61648123664f, 0.015768545814f), make_float3(0.017639857445f, -0.042770613258f, 0.942103121235f))


/* Math helper functions ----------------------------*/

typedef struct {
  float3 x, y, z;
} float3x3;

// Helper function to create a float3x3
__DEVICE__ float3x3 make_float3x3(float3 a, float3 b, float3 c) {
  float3x3 d;
  d.x = a, d.y = b, d.z = c;
  return d;
}

// Return identity 3x3 matrix
__DEVICE__ float3x3 identity_mtx() {
  return make_float3x3(make_float3(1.0f, 0.0f, 0.0f), make_float3(0.0f, 1.0f, 0.0f), make_float3(0.0f, 0.0f, 1.0f));
}

// Multiply 3x3 matrix m and float3 vector v
__DEVICE__ float3 vdot(float3x3 m, float3 v) {
  return make_float3(m.x.x*v.x + m.x.y*v.y + m.x.z*v.z, m.y.x*v.x + m.y.y*v.y + m.y.z*v.z, m.z.x*v.x + m.z.y*v.y + m.z.z*v.z);
}

// Calculate inverse of 3x3 matrix
__DEVICE__ float3x3 inv_f33(float3x3 m) {
  float d = m.x.x*(m.y.y*m.z.z - m.z.y*m.y.z) - m.x.y*(m.y.x*m.z.z - m.y.z*m.z.x) + m.x.z*(m.y.x*m.z.y - m.y.y*m.z.x);
  float id = 1.0f / d;
  float3x3 c = identity_mtx();
  c.x.x = id*(m.y.y*m.z.z - m.z.y*m.y.z), c.x.y = id*(m.x.z*m.z.y - m.x.y*m.z.z), c.x.z = id*(m.x.y*m.y.z - m.x.z*m.y.y);
  c.y.x = id*(m.y.z*m.z.x - m.y.x*m.z.z), c.y.y = id*(m.x.x*m.z.z - m.x.z*m.z.x), c.y.z = id*(m.y.x*m.x.z - m.x.x*m.y.z);
  c.z.x = id*(m.y.x*m.z.y - m.z.x*m.y.y), c.z.y = id*(m.z.x*m.x.y - m.x.x*m.z.y), c.z.z = id*(m.x.x*m.y.y - m.y.x*m.x.y);
  return c;
}

// Safe division of float a by float b
__DEVICE__ float sdivf(float a, float b) {
  if (b == 0.0f) return 0.0f;
  else return a/b;
}

// Safe division of float3 a by float b
__DEVICE__ float3 sdivf3f(float3 a, float b) {
  return make_float3(sdivf(a.x, b), sdivf(a.y, b), sdivf(a.z, b));
}

// Safe element-wise division of float3 a by float3 b
__DEVICE__ float3 sdivf3f3(float3 a, float3 b) {
  return make_float3(sdivf(a.x, b.x), sdivf(a.y, b.y), sdivf(a.z, b.z));
}

// Safe power function raising float a to power float b
__DEVICE__ float spowf(float a, float b) {
  if (a <= 0.0f) return a;
  else return _powf(a, b);
}

// Safe power function raising float3 a to power float b
__DEVICE__ float3 spowf3(float3 a, float b) {
  return make_float3(spowf(a.x, b), spowf(a.y, b), spowf(a.z, b));
}

// Return max of float3 a and float mn
__DEVICE__ float3 maxf3(float mn, float3 a) { return make_float3(_fmaxf(a.x, mn), _fmaxf(a.y, mn), _fmaxf(a.z, mn)); }

// Return min of float3 a and float mx
__DEVICE__ float3 minf3(float mx, float3 a) { return make_float3(_fminf(a.x, mx), _fminf(a.y, mx), _fminf(a.z, mx)); }

// Clamp each component of float3 a to be between float mn and float mx
__DEVICE__ float3 clampminf3(float3 a, float mn) { return make_float3(_fmaxf(a.x, mn), _fmaxf(a.y, mn), _fmaxf(a.z, mn)); }

// Clamp each component of float3 a to be between float mn and float mx
__DEVICE__ float3 clampf3(float3 a, float mn, float mx) { 
  return make_float3(_fminf(_fmaxf(a.x, mn), mx), _fminf(_fmaxf(a.y, mn), mx), _fminf(_fmaxf(a.z, mn), mx));
}


__DEVICE__ float3 eotf_hlg(float3 rgb, int inverse) {
  /* Aply the HLG Forward or Inverse EOTF. Implements the full ambient surround illumination model
      ITU-R Rec BT.2100-2 https://www.itu.int/rec/R-REC-BT.2100
      ITU-R Rep BT.2390-8: https://www.itu.int/pub/R-REP-BT.2390
      Perceptual Quantiser (PQ) to Hybrid Log-Gamma (HLG) Transcoding: 
        https://www.bbc.co.uk/rd/sites/50335ff370b5c262af000004/assets/592eea8006d63e5e5200f90d/BBC_HDRTV_PQ_HLG_Transcode_v2.pdf
  */

  const float HLG_Lw = 1000.0f;
  // const float HLG_Lb = 0.0f;
  const float HLG_Ls = 5.0f;
  const float h_a = 0.17883277f;
  const float h_b = 1.0f - 4.0f*0.17883277f;
  const float h_c = 0.5f - h_a*_logf(4.0f*h_a);
  const float h_g = 1.2f*_powf(1.111f, _log2f(HLG_Lw/1000.0f))*_powf(0.98f, _log2f(_fmaxf(1e-6f, HLG_Ls)/5.0f));
  if (inverse == 1) {
    float Yd = 0.2627f*rgb.x + 0.6780f*rgb.y + 0.0593f*rgb.z;
    // HLG Inverse OOTF
    rgb = rgb*_powf(Yd, (1.0f - h_g)/h_g);
    // HLG OETF
    rgb.x = rgb.x <= 1.0f/12.0f ? _sqrtf(3.0f*rgb.x) : h_a*_logf(12.0f*rgb.x - h_b) + h_c;
    rgb.y = rgb.y <= 1.0f/12.0f ? _sqrtf(3.0f*rgb.y) : h_a*_logf(12.0f*rgb.y - h_b) + h_c;
    rgb.z = rgb.z <= 1.0f/12.0f ? _sqrtf(3.0f*rgb.z) : h_a*_logf(12.0f*rgb.z - h_b) + h_c;
  } else {
    // HLG Inverse OETF
    rgb.x = rgb.x <= 0.5f ? rgb.x*rgb.x/3.0f : (_expf((rgb.x - h_c)/h_a) + h_b)/12.0f;
    rgb.y = rgb.y <= 0.5f ? rgb.y*rgb.y/3.0f : (_expf((rgb.y - h_c)/h_a) + h_b)/12.0f;
    rgb.z = rgb.z <= 0.5f ? rgb.z*rgb.z/3.0f : (_expf((rgb.z - h_c)/h_a) + h_b)/12.0f;
    // HLG OOTF
    float Ys = 0.2627f*rgb.x + 0.6780f*rgb.y + 0.0593f*rgb.z;
    rgb = rgb*_powf(Ys, h_g - 1.0f);
  }
  return rgb;
}


__DEVICE__ float3 eotf_pq(float3 rgb, int inverse) {
  /* Apply the ST-2084 PQ Forward or Inverse EOTF
      ITU-R Rec BT.2100-2 https://www.itu.int/rec/R-REC-BT.2100
      ITU-R Rep BT.2390-9 https://www.itu.int/pub/R-REP-BT.2390
      Note: in the spec there is a normalization for peak display luminance. 
      For this function we assume the input is already normalized such that 1.0 = 10,000 nits
  */
  
  // const float Lp = 1.0f;
  const float m1 = 2610.0f/16384.0f;
  const float m2 = 2523.0f/32.0f;
  const float c1 = 107.0f/128.0f;
  const float c2 = 2413.0f/128.0f;
  const float c3 = 2392.0f/128.0f;

  if (inverse == 1) {
    // rgb /= Lp;
    rgb = spowf3(rgb, m1);
    rgb = spowf3((c1 + c2*rgb)/(1.0f + c3*rgb), m2);
  } else {
    rgb = spowf3(rgb, 1.0f/m2);
    rgb = spowf3((rgb - c1)/(c2 - c3*rgb), 1.0f/m1);
    // rgb *= Lp;
  }
  return rgb;
}



////////////////////////////////////////////////////////////////////////////////////////////

__DEVICE__ float3x3 scrot_mtx(float3 s, float3 a) {
  /* Create a 3x3 matrix that scales and rotates each primary,
      while preserving the neutral axis.
      s: amount to scale each primary
      a: amount to "rotate" each primary off axis
  */ 
  return make_float3x3(
    make_float3(1.0f-s.y-a.y-s.z+a.z, s.y+a.y, s.z-a.z),
    make_float3(s.x+a.x, 1.0f-s.x-a.x-s.z-a.z, s.z+a.z),
    make_float3(s.x-a.x, s.y-a.y, 1.0f-s.x+a.x-s.y+a.y));
}


__DEVICE__ float3 xlog(float3 rgb, int inv) {
  /* XLog - a simple log curve with no linear extension, 
      intersection constraints at (w0, 1), and (0, y1), asymptote at o0.
      https://www.desmos.com/calculator/n64uurfttk
      https://colab.research.google.com/drive/1NwjaD0NzNMzQeNQqZECj33PdcYGkeBM4
  */
  const float w0 = 128.0f;
  const float k = -4.0f;
  const float y1 = 0.0f;
  const float o0 = -spowf(2.0f,k);
  const float s0 = (1.0f - y1)/_logf(1.0f - w0/o0);
  const float o1 = 1.0f - s0*_logf(w0 - o0);
  if (inv == 1) {
    rgb.x = _expf((rgb.x - o1)/s0) + o0;
    rgb.y = _expf((rgb.y - o1)/s0) + o0;
    rgb.z = _expf((rgb.z - o1)/s0) + o0;
  } else {
    rgb.x = s0*_logf(rgb.x - o0) + o1;
    rgb.y = s0*_logf(rgb.y - o0) + o1;
    rgb.z = s0*_logf(rgb.z - o0) + o1;
  }
  return rgb;
}


__DEVICE__ float compress_powerptoe(float x, float p, float m, float t0, int inv) {
  /* Variable slope compression function.
      p: Slope of the compression curve. Controls how compressed values are distributed. 
         p=0.0 is a clip. p=1.0 is a hyperbolic curve.
      m: Compression amount. How far to reach outside of the gamut boundary to pull values in. m=0.0 is a clip.
      t0: Threshold point within gamut to start compression. t0=0.0 is a clip.
      https://www.desmos.com/calculator/igy3az7maq
  */

  float i = inv==1 ? -1.0f : 1.0f;
  return x > t0 ? x : (x - t0)*spowf(1.0f + i*spowf((t0 - x)/(t0 - m), 1.0f/p), -p) + t0;
}


__DEVICE__ float contrast(float x, float p, float s0, float t0, float o0, float m0, int inv) {
  /* Piecewise pivoted power function.
      p: power
      s0: scale which allows the pivot to be adjusted
      t0: threshold point where the high linear extension begins
      m0: slope for the linear extension
      o0: offset for the linear extension
  */
  if (inv == 1)
    return x < o0 ? spowf(x/s0, 1.0f/p) : (x - o0)/m0 + t0;
  else
    return x < t0 ? s0*spowf(x, p) : m0*(x - t0) + o0;
}


__DEVICE__ float tonescale(float x, float m, float s, int inv) {
  /*  Basic hyperbolic compression function. 
        m: output y scale
        s: input x scale
        https://www.desmos.com/calculator/fkqf9jrju7
  */
  if (inv==1) 
    return x>m?x : s*x/(m - x);
  else 
    return m*x/(x + s);
}





__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
  // Input gamut conversion matrix (CAT02 chromatic adaptation to D65)
  float3x3 in_to_xyz;
  if (in_gamut == i_xyz) in_to_xyz = identity_mtx();
  else if (in_gamut == i_ap0) in_to_xyz = matrix_ap0_to_xyz;
  else if (in_gamut == i_ap1) in_to_xyz = matrix_ap1_to_xyz;
  else if (in_gamut == i_p3d65) in_to_xyz = matrix_p3d65_to_xyz;
  else if (in_gamut == i_rec2020) in_to_xyz = matrix_rec2020_to_xyz;
  else if (in_gamut == i_rec709) in_to_xyz = matrix_rec709_to_xyz;
  else if (in_gamut == i_awg3) in_to_xyz = matrix_arriwg3_to_xyz;
  else if (in_gamut == i_awg4) in_to_xyz = matrix_arriwg4_to_xyz;
  else if (in_gamut == i_rwg) in_to_xyz = matrix_redwg_to_xyz;
  else if (in_gamut == i_sgamut3) in_to_xyz = matrix_sonysgamut3_to_xyz;
  else if (in_gamut == i_sgamut3cine) in_to_xyz = matrix_sonysgamut3cine_to_xyz;
  else if (in_gamut == i_bmdwg) in_to_xyz = matrix_bmdwg_to_xyz;
  else if (in_gamut == i_cinegamut) in_to_xyz = matrix_canoncinegamut_to_xyz;
  else if (in_gamut == i_egamut) in_to_xyz = matrix_egamut_to_xyz;
  else if (in_gamut == i_davinciwg) in_to_xyz = matrix_davinciwg_to_xyz;
  
  float3x3 xyz_to_display;
  if (display_gamut == Rec709) xyz_to_display = matrix_xyz_to_rec709;
  else if (display_gamut == P3D65) xyz_to_display = matrix_xyz_to_p3d65;
  else if (display_gamut == Rec2020) xyz_to_display = matrix_xyz_to_rec2020;
  
  int eotf;
  if (EOTF == lin)          eotf = 0;
  else if (EOTF == srgb)    eotf = 1;
  else if (EOTF == rec1886) eotf = 2;
  else if (EOTF == dci)     eotf = 3;
  else if (EOTF == pq)      eotf = 4;
  else if (EOTF == hlg)     eotf = 5;
  
  const float ds = eotf == 4 ? 0.01f : eotf == 5 ? 0.1f : 100.0f/Lp;
  const float clamp_max = ds*Lp/100.0f;

  // Assemble scrot matrices
  float3x3 look_mtx = scrot_mtx(make_float3(rs_lk, gs_lk, bs_lk), make_float3(0.0f, 0.0f, 0.0f));
  float3x3 look_mtx_inv = inv_f33(look_mtx);
  float3x3 rnd_mtx = scrot_mtx(make_float3(rs_rnd, gs_rnd, bs_rnd), make_float3(rr_rnd, gr_rnd, br_rnd));
  float3x3 rnd_mtx_inv = inv_f33(rnd_mtx);



  /* --------------------------- */
  /* Pre-Calculations for parameter space */
  
  // Precalculations for Purity Compress intersection constraint at (-x0, 0)
  const float pc_m0 = spowf((pc_t0 + _fmaxf(1e-6f,pc_x0))/pc_t0, 1.0f/pc_p) - 1.0f;
  const float pc_m = spowf(pc_m0, -pc_p)*(pc_t0*spowf(pc_m0, pc_p) - pc_t0 - _fmaxf(1e-6f,pc_x0));
  
  /* Michaelis-Menten Contrast Tonescale Function
      Has 2 components: a contrast curve with linear extension,
      and a hyperbolic compression.
      https://www.desmos.com/calculator/de7q5mpmju
  */

  /* A contrast curve with an intersection constraint at (x0, y0), and
      a linear extension above t0.
      https://www.desmos.com/calculator/57lthhguq7
  */
  // Contrast precalculations
  const float x0 = 0.18f + off;
  const float y0 = Lg/100.0f*(1.0f + Lgb*_logf(Lp/100.0f)/_logf(2.0f));
  const float t0 = x0 + conh;
  const float s0 = y0*spowf(x0, -con);
  const float o0 = s0*spowf(t0, con);
  const float m0 = t0==0.0f ? 0.0f : con*o0/t0;
  
  /* Super simple Michaelis-Menten tonescale function with 
      intersection constraints at (w0, w1) and (y0, y0).
      There is no scene-linear scale since we do that earlier in the contrast function.
      https://www.desmos.com/calculator/gesdthnhd3
  */

  // Tonescale precalculations
  const float w1 = Lp/100.0f;
  const float m1 = (w1*(m0*w0-y0))/(m0*w0-w1);
  const float wtm_abs = wtm > 0.0f ? wtm : -wtm;
  const float3 m = make_float3( m1*spowf(2.0f, wtm - wtm_abs),
                                m1*spowf(2.0f, wtm*wtn - wtm_abs),
                                m1*spowf(2.0f, -wtm - wtm_abs));
  const float3 s1 = make_float3(m.x - y0, m.y - y0, m.z - y0);
  const float3 s = make_float3( s1.x*spowf(2.0f, -gtm),
                                s1.y*spowf(2.0f, -gtm*gtn),
                                s1.z*spowf(2.0f, gtm));





  float3 rgb = make_float3(p_R, p_G, p_B);

  if (invert == 0) {
    /* Forward Rendering Code ------------------------------------------ */
    
    // Convert into display gamut
    rgb = vdot(in_to_xyz, rgb);
    rgb = vdot(xyz_to_display, rgb);

    // Offset
    rgb += off;

    /* Purity Compress
        A low complexity per-channel purity / "chroma" / "saturation" compression.
        Note we could expose the individual compression parameters to achieve hue
        control, but we skip this since we will use the scrot matrices for this purpose.
    */
    if (pc_p < 0.01f || pc_t0 < 0.001f) {
      // Just clamp min of slope = 0
      rgb = clampminf3(rgb, 0.0f);
    } else {
      float mx = _fmaxf(rgb.x, _fmaxf(rgb.y, rgb.z));
      rgb = sdivf3f(rgb, mx);
      rgb.x = compress_powerptoe(rgb.x, pc_p, pc_m, pc_t0, 0);
      rgb.y = compress_powerptoe(rgb.y, pc_p, pc_m, pc_t0, 0);
      rgb.z = compress_powerptoe(rgb.z, pc_p, pc_m, pc_t0, 0);
      rgb = rgb*mx;
    }

    // Rendering matrix
    rgb = vdot(rnd_mtx, rgb);
    
    // Clamp negatives
    rgb = clampminf3(rgb, 0.0f);

    // Look matrix in log
    rgb = xlog(rgb, 0);
    rgb = vdot(look_mtx, rgb);
    rgb = xlog(rgb, 1);

    // Apply tonescale
    rgb.x = contrast(rgb.x, con, s0, t0, o0, m0, 0);
    rgb.y = contrast(rgb.y, con, s0, t0, o0, m0, 0);
    rgb.z = contrast(rgb.z, con, s0, t0, o0, m0, 0);

    rgb.x = tonescale(rgb.x, m.x, s.x, 0);
    rgb.y = tonescale(rgb.y, m.y, s.y, 0);
    rgb.z = tonescale(rgb.z, m.z, s.z, 0);

    /* Display scale
        Tonescale outputs nits/100. 10 nits = 0.1, 1000 nits = 10.0
        This scale either normalizes into a 0-1 range for SDR
        or into the 10,000 nit PQ container, or 1,000 nit HLG container.
    */
    rgb *= ds;

    // Clamp
    if (clamp == 1)
      rgb = clampf3(rgb, 0.0f, clamp_max);

    // Apply inverse Display EOTF
    float eotf_p = 2.0f + eotf*0.2f;
    if ((eotf > 0) && (eotf < 4)) {
      rgb = spowf3(rgb, 1.0f/eotf_p);
    } else if (eotf == 4) {
      rgb = eotf_pq(rgb, 1);
    } else if (eotf == 5) {
      rgb = eotf_hlg(rgb, 1);
    }
    
    return rgb;
  
  }
  else {
    /* Inverse Rendering Code ------------------------------------------ */
    
    rgb = clampf3(rgb, 0.0f, 1.0f);
    
    // Apply Display EOTF
    float eotf_p = 2.0f + eotf*0.2f;
    if ((eotf > 0) && (eotf < 4)) {
      rgb = spowf3(rgb, eotf_p);
    } else if (eotf == 4) {
      rgb = eotf_pq(rgb, 0);
    } else if (eotf == 5) {
      rgb = eotf_hlg(rgb, 0);
    }
    
    // Inverse Display scale
    rgb /= ds;

    // Invert tonescale
    rgb.x = tonescale(rgb.x, m.x, s.x, 1);
    rgb.y = tonescale(rgb.y, m.y, s.y, 1);
    rgb.z = tonescale(rgb.z, m.z, s.z, 1);
    rgb.x = contrast(rgb.x, con, s0, t0, o0, m0, 1);
    rgb.y = contrast(rgb.y, con, s0, t0, o0, m0, 1);
    rgb.z = contrast(rgb.z, con, s0, t0, o0, m0, 1);

    // Inverse Look matrix in XLog
    rgb = xlog(rgb, 0);
    rgb = vdot(look_mtx_inv, rgb);
    rgb = xlog(rgb, 1);

    // Inverse rendering matrix
    rgb = vdot(rnd_mtx_inv, rgb);

    /* Inverse Low-complexity per-channel "chroma" compression */
    float mx = _fmaxf(rgb.x, _fmaxf(rgb.y, rgb.z));
    rgb = sdivf3f(rgb, mx);
    rgb.x = compress_powerptoe(rgb.x, pc_p, pc_m, pc_t0, 1);
    rgb.y = compress_powerptoe(rgb.y, pc_p, pc_m, pc_t0, 1);
    rgb.z = compress_powerptoe(rgb.z, pc_p, pc_m, pc_t0, 1);
    rgb = rgb*mx;

    // Inverse Offset
    rgb -= off;

    // Convert from display gamut back to scene gamut
    rgb = vdot(inv_f33(xyz_to_display), rgb);
    rgb = vdot(inv_f33(in_to_xyz), rgb);
    
    return rgb;

  }
}
